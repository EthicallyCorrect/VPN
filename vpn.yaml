AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create an OpenVPN server on a t2.micro EC2 instance with minimal user interaction. Users can optionally enable logging of network traffic and websites visited.

Parameters:
  Region:
    Type: String
    Description: |
      Select the region for your VPN:
      - us-east-1: US East (N. Virginia)
      - us-west-1: US West (N. California)
      - us-west-2: US West (Oregon)
      - eu-west-1: EU (Ireland)
      - eu-central-1: EU (Frankfurt)
      - ap-southeast-1: Asia Pacific (Singapore)
      - ap-southeast-2: Asia Pacific (Sydney)
      - ap-northeast-1: Asia Pacific (Tokyo)
      - ap-northeast-2: Asia Pacific (Seoul)
      - sa-east-1: South America (SÃ£o Paulo)
    AllowedValues:
      - us-east-1
      - us-west-1
      - us-west-2
      - eu-west-1
      - eu-central-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
      - ap-northeast-2
      - sa-east-1
    ConstraintDescription: Must be a valid AWS region
    Default: us-east-1

  EnableLogging:
    Type: String
    Description: "Enable logging of network traffic and websites visited. This may incur additional costs."
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: 'Latest Amazon Linux 2 AMI ID'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPNVPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: VPNGateway

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  VPNSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable VPN access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: VPNSecurityGroup

  VPNInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref VPNSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          exec > /var/log/user-data.log 2>&1
          echo "Starting user data script"
          echo "Installing updates and dependencies"
          yum update -y
          yum install -y openvpn easy-rsa httpd amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          echo "Setting up OpenVPN"
          make-cadir ~/openvpn-ca
          cd ~/openvpn-ca
          source vars
          ./clean-all
          ./build-ca --batch
          ./build-key-server --batch server
          ./build-dh
          openvpn --genkey --secret keys/ta.key
          ./build-key --batch client1
          cp ~/openvpn-ca/keys/ca.crt /etc/openvpn/
          cp ~/openvpn-ca/keys/server.crt /etc/openvpn/
          cp ~/openvpn-ca/keys/server.key /etc/openvpn/
          cp ~/openvpn-ca/keys/ta.key /etc/openvpn/
          cp ~/openvpn-ca/keys/dh2048.pem /etc/openvpn/
          cat > /etc/openvpn/server.conf <<-EOF
          port 1194
          proto udp
          dev tun
          ca ca.crt
          cert server.crt
          key server.key
          dh dh2048.pem
          auth SHA256
          tls-auth ta.key 0
          server 10.8.0.0 255.255.255.0
          ifconfig-pool-persist ipp.txt
          push "redirect-gateway def1 bypass-dhcp"
          push "dhcp-option DNS 8.8.8.8"
          push "dhcp-option DNS 8.8.4.4"
          keepalive 10 120
          cipher AES-256-CBC
          user nobody
          group nogroup
          persist-key
          persist-tun
          verb 3
          EOF
          systemctl start openvpn@server
          systemctl enable openvpn@server
          
          echo "Setting up web server"
          systemctl start httpd
          systemctl enable httpd
          mkdir -p /home/ec2-user/client-configs/keys
          cp ~/openvpn-ca/keys/ca.crt /home/ec2-user/client-configs/keys/
          cp ~/openvpn-ca/keys/client1.crt /home/ec2-user/client-configs/keys/
          cp ~/openvpn-ca/keys/client1.key /home/ec2-user/client-configs/keys/
          cp ~/openvpn-ca/keys/ta.key /home/ec2-user/client-configs/keys/
          cat > /home/ec2-user/client-configs/base.conf <<-EOF
          client
          dev tun
          proto udp
          remote $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4) 1194
          resolv-retry infinite
          nobind
          persist-key
          persist-tun
          remote-cert-tls server
          cipher AES-256-CBC
          auth SHA256
          key-direction 1
          verb 3
          EOF
          cat /home/ec2-user/client-configs/base.conf > /home/ec2-user/client-configs/client1.ovpn
          echo '<ca>' >> /home/ec2-user/client-configs/client1.ovpn
          cat /home/ec2-user/client-configs/keys/ca.crt >> /home/ec2-user/client-configs/client1.ovpn
          echo '</ca>' >> /home/ec2-user/client-configs/client1.ovpn
          echo '<cert>' >> /home/ec2-user/client-configs/client1.ovpn
          cat /home/ec2-user/client-configs/keys/client1.crt >> /home/ec2-user/client-configs/client1.ovpn
          echo '</cert>' >> /home/ec2-user/client-configs/client1.ovpn
          echo '<key>' >> /home/ec2-user/client-configs/client1.ovpn
          cat /home/ec2-user/client-configs/keys/client1.key >> /home/ec2-user/client-configs/client1.ovpn
          echo '</key>' >> /home/ec2-user/client-configs/client1.ovpn
          echo '<tls-auth>' >> /home/ec2-user/client-configs/client1.ovpn
          cat /home/ec2-user/client-configs/keys/ta.key >> /home/ec2-user/client-configs/client1.ovpn
          echo '</tls-auth>' >> /home/ec2-user/client-configs/client1.ovpn
          cat /home/ec2-user/client-configs/keys/ta.key >> /home/ec2-user/client-configs/client1.ovpn
          cp /home/ec2-user/client-configs/client1.ovpn /var/www/html/client1.ovpn
          
          # Display configuration file content in a simple HTML page for easy access
          echo '<!DOCTYPE html><html><head><title>OpenVPN Client Config</title></head><body><h1>Download Your OpenVPN Client Configuration</h1><a href="client1.ovpn" download>Download client1.ovpn</a></body></html>' > /var/www/html/index.html
          
          if [ "$(aws ssm get-parameter --name /cloudformation/${AWS::StackName}/EnableLogging --query 'Parameter.Value' --output text)" = "Yes" ]; then
              echo "Setting up logging"
              yum install -y jq
              cat > /etc/cron.d/fetch-vpc-logs <<-EOF
              */5 * * * * root /usr/local/bin/fetch-vpc-logs.sh
              EOF
              
              cat > /usr/local/bin/fetch-vpc-logs.sh <<-EOF
              #!/bin/bash
              tail -n 10000 /var/log/openvpn.log | jq -R -s -c 'split("\n")[:-1] | map({"message": ., "timestamp": now | todate})' > /var/www/html/logs.json
              EOF
              
              chmod +x /usr/local/bin/fetch-vpc-logs.sh
              /usr/local/bin/fetch-vpc-logs.sh
              
              cat > /var/www/html/logs.html <<-EOF
              <html>
              <head>
                  <title>VPN Logs</title>
              </head>
              <body>
                  <h1>VPN Logs</h1>
                  <pre id="log-content"></pre>
                  <script>
                      function fetchLogs() {
                          fetch('/logs.json')
                              .then(response => response.json())
                              .then(data => {
                                  document.getElementById('log-content').textContent = JSON.stringify(data, null, 2);
                              })
                              .catch(error => console.error('Error fetching logs:', error));
                      }
                      setInterval(fetchLogs, 5000);
                      fetchLogs();
                  </script>
              </body>
              </html>
              EOF
          fi

Conditions:
  EnableFlowLogs: !Equals [!Ref EnableLogging, "Yes"]

Outputs:
  VPNServerPublicIP:
    Description: Public IP address of the VPN server
    Value: !GetAtt VPNInstance.PublicIp
  VPNClientConfigURL:
    Description: URL to download the OpenVPN client configuration file
    Value: !Sub "http://${VPNInstance.PublicIp}/client1.ovpn"
  VPNLogsURL:
    Description: URL to view VPN logs (if enabled)
    Condition: EnableFlowLogs
    Value: !Sub "http://${VPNInstance.PublicIp}/logs.html"
  CostEstimation:
    Description: |
      Estimation of the additional costs associated with enabling logging:
      - Local storage of logs on the server.
      Note: Actual costs may vary based on the amount of data processed.
    Value: !If [EnableFlowLogs, "Local log storage enabled. Costs may vary based on storage usage.", "Logging is disabled."]
